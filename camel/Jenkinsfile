#!/usr/bin/groovy

import groovy.io.FileType

node('pipeline') {
  echo """
  CAMEL_VERSION : ${CAMEL_VERSION}
  CAMEL_PROD_BRANCH : ${CAMEL_PROD_BRANCH}
  CAMEL_VERSION_BRANCH : ${CAMEL_VERSION_BRANCH}
  """

  String CWD = pwd()

  // Load up CI helper methods
  checkout scm

  // Tooling versions
  def mvnHome = tool 'maven-3.8.4'
  def javaHome = tool 'java-17'
  def goHome = tool 'go-1.14'

  // Configure tooling
  env.GOROOT = "${goHome}"
  env.PATH = "${javaHome}/bin:${mvnHome}/bin:${goHome}/bin:${env.PATH}"
  env.JAVA_HOME = "${javaHome}"
  env.MAVEN_OPTS="-Xmx3g -Dmaven.artifact.threads=5"

  // Clear the workspace
  sh "pwd; ls -lah"
  def tmpDir = pwd tmp: true

  def branch = "camel-${CAMEL_VERSION}-branch" 
  def camelprodbranch = "camel-prod-branch"

  echo "cwd=${CWD}"
  sh "ls ${CWD}/camelpatches"
  def camelpatches = new File("${CWD}/camelpatches")
  
  // Check out the branch
  echo "remove ${tmpDir}/${branch}"
  sh "rm -rf ${tmpDir}/${branch}"
  sh "git clone -b ${CAMEL_VERSION_BRANCH} https://github.com/apache/camel.git ${tmpDir}/${branch}"

  // Change versions and commit
  sh "cd ${tmpDir}/${branch}; mvn -DnewVersion=${CAMEL_VERSION}-SNAPSHOT -DgenerateBackupPoms=false versions:set"
  //sh "cd ${tmpDir}/${branch}; git commit -a -m \"Change versions to ${CAMEL_VERSION}-SNAPSHOT\""

  // Check out the prod branch and copy over pieces
  //git url: "https://github.com/jboss-fuse/camel.git", branch: "${CAMEL_PROD_BRANCH}", credentialsId: 'github.com'
  //sh "cp -r product ${tmpDir}/${branch}"
  //sh "cd ${tmpDir}/${branch}; git add product; git commit -a -m \"Add product directory\""

  // Apply pre-product patches
  try {
    echo "========================="
    echo "== Applying pre-prod-maven-plugin patches"

    def list = 'ls -l .'.execute().text
    list.eachLine { patchfile ->
        echo "Patching with " + patchfile
        if (patchfile.getName().toString().startsWith("pre-")) {
          echo "cd ${tmpDir}/${branch}; git apply --check ${CWD}/" + patchfile
          sh "cd ${tmpDir}/${branch}; git apply --check ${CWD}/" + patchfile
          sh "cd ${tmpDir}/${branch}; git am --keep-cr --signoff < ${CWD}/" + patchfile
        }
    }


    echo "========================="
  } catch (err) {
    currentBuild.result = "FAILURE"
    throw err
  } finally {
  }

  // Run prod-maven-plugin
  try {
    echo "========================="
    echo "== Applying prod-maven-plugin"
    echo "========================="

  } catch (err) {
    currentBuild.result = "FAILURE"
    throw err
  } finally {
  }

  // Apply post-product patches
  try {
    echo "========================="
    echo "== Applying post-prod-maven-plugin patches"
    echo "========================="

    File[] files = camelpatches.listFiles()
    for (File patchfile : files) {
      echo "Patching with " + patchfile.getName().toString()
      if (patchfile.getName().toString().startsWith("post-")) {
        echo "cd ${tmpDir}/${branch}; git apply --check ${CWD}/${patchfile}"
        sh "cd ${tmpDir}/${branch}; git apply --check ${CWD}/${patchfile}"
        sh "cd ${tmpDir}/${branch}; git am --keep-cr --signoff < ${CWD}/${patchfile}"
      }
    }
  } catch (err) {
    currentBuild.result = "FAILURE"
    throw err
  } finally {
  }




}
